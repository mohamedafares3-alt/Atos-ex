{"version":3,"file":"calories-BYpFsBdo.js","sources":["../../src/utils/calories.js"],"sourcesContent":["// Simple calorie estimation utilities\n// Uses base constants defined for a 70kg person and scales linearly by weight.\n\nconst BASE_WEIGHT_KG = 70;\n\n// Approximate calories burned per rep for bodyweight exercises at 70kg\n// These are conservative estimates for moderate effort.\nconst PER_REP_BASE = {\n  pushups: 0.5,        // kcal per rep\n  squats: 0.32,\n  lunges: 0.4,\n  burpees: 1.0,\n  mountainclimbers: 0.35,\n  jumpingjacks: 0.2\n};\n\n// Approximate kcal per minute for isometric/time-based exercises (plank) at 70kg\nconst PER_MIN_BASE = {\n  plank: 4.5, // kcal per minute\n  sideplank: 4.0, // kcal per minute (slightly less than regular plank)\n  // fallback cardio-ish rate\n  defaultTime: 6.0\n};\n\nfunction normalizeName(name) {\n  return (name || '').toString().toLowerCase().replace(/[^a-z0-9]+/g, '');\n}\n\nexport function caloriesForItem(item, userWeightKg = BASE_WEIGHT_KG) {\n  // item: { name, reps, sets, durationSec }\n  const nameKey = normalizeName(item.name);\n  const weightFactor = (Number(userWeightKg) > 0) ? (Number(userWeightKg) / BASE_WEIGHT_KG) : 1;\n  const sets = Number(item.sets || 1);\n\n  // Time-based: if durationSec provided (for plank etc.) use per-minute\n  if (item.durationSec || nameKey.includes('plank') || typeof item.duration !== 'undefined') {\n    const durationSec = Number(item.durationSec || (parseInt(String(item.duration || '').replace(/\\D/g, ''), 10) || 0));\n    const minutes = durationSec / 60;\n    const perMin = PER_MIN_BASE[nameKey] ?? PER_MIN_BASE.defaultTime;\n    const kcal = perMin * minutes * weightFactor * sets;\n    return Number(kcal || 0);\n  }\n\n  // Rep-based\n  const reps = Number(item.reps || 0);\n  const perRep = PER_REP_BASE[nameKey] ?? 0.3; // default small per-rep value\n  const kcal = perRep * reps * weightFactor * sets;\n  return Number(kcal || 0);\n}\n\nexport function calculateSessionCalories(items = [], user = {}) {\n  const weightKg = Number(user?.weight) || BASE_WEIGHT_KG;\n  let total = 0;\n  const breakdown = [];\n  for (const it of items) {\n    const c = caloriesForItem(it, weightKg);\n    breakdown.push({ name: it.name, calories: c });\n    total += c;\n  }\n  return { total: Number(total), breakdown };\n}\n"],"names":["PER_REP_BASE","pushups","squats","lunges","burpees","mountainclimbers","jumpingjacks","PER_MIN_BASE","plank","sideplank","defaultTime","caloriesForItem","item","userWeightKg","nameKey","name","toString","toLowerCase","replace","weightFactor","Number","sets","durationSec","includes","duration","parseInt","String","reps","calculateSessionCalories","items","user","weightKg","weight","total","breakdown","it","c","push","calories"],"mappings":"AAGA,MAIMA,EAAe,CACnBC,QAAS,GACTC,OAAQ,IACRC,OAAQ,GACRC,QAAS,EACTC,iBAAkB,IAClBC,aAAc,IAIVC,EAAe,CACnBC,MAAO,IACPC,UAAW,EAEXC,YAAa,GAOR,SAASC,EAAgBC,EAAMC,EAzBf,IA2BrB,MAAMC,GAAwBF,EAAKG,MALnB,IAAIC,WAAWC,cAAcC,QAAQ,cAAe,IAMpE,MAAMC,EAAgBC,OAAOP,GAAgB,EAAMO,OAAOP,GA5BrC,GA4BuE,EACtFQ,EAAOD,OAAOR,EAAKS,MAAQ,GAGjC,GAAIT,EAAKU,aAAeR,EAAQS,SAAS,eAAqC,IAAlBX,EAAKY,SAA0B,CACzF,MAAMF,EAAcF,OAAOR,EAAKU,aAAgBG,SAASC,OAAOd,EAAKY,UAAY,IAAIN,QAAQ,MAAO,IAAK,KAAO,GAIhH,OAAOE,QAFQb,EAAaO,IAAYP,EAAaG,cADrCY,EAAc,IAEEH,EAAeE,GACzB,EACxB,CAGA,MAAMM,EAAOP,OAAOR,EAAKe,MAAQ,GAGjC,OAAOP,QAFQpB,EAAac,IAAY,IAClBa,EAAOR,EAAeE,GACtB,EACxB,CAEO,SAASO,EAAyBC,EAAQ,GAAIC,EAAO,CAAA,GAC1D,MAAMC,EAAWX,OAAO,MAAAU,OAAA,EAAAA,EAAME,SAhDT,GAiDrB,IAAIC,EAAQ,EACZ,MAAMC,EAAY,GAClB,IAAA,MAAWC,KAAMN,EAAO,CACtB,MAAMO,EAAIzB,EAAgBwB,EAAIJ,GAC9BG,EAAUG,KAAK,CAAEtB,KAAMoB,EAAGpB,KAAMuB,SAAUF,IAC1CH,GAASG,CACX,CACA,MAAO,CAAEH,MAAOb,OAAOa,GAAQC,YACjC"}